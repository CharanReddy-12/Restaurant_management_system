package application;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * Represents an customer order, containing a list of OrderItems.
 * Manages the total amount and payment status of the order.
 */
public class Order {
    private IntegerProperty id;
    private StringProperty customerName;
    private DoubleProperty total;
    private BooleanProperty isPaid;
    private StringProperty paymentMethod;
    private ObservableList<OrderItem> items;

    /**
     * Constructor for creating a new Order (before saving to DB).
     * @param customerName The name of the customer placing the order.
     */
    public Order(String customerName) {
        this.id = new SimpleIntegerProperty(0); // ID will be generated by DB
        this.customerName = new SimpleStringProperty(customerName);
        this.total = new SimpleDoubleProperty(0.0);
        this.isPaid = new SimpleBooleanProperty(false);
        this.paymentMethod = new SimpleStringProperty("Unpaid");
        this.items = FXCollections.observableArrayList();
        // Listener to recalculate total whenever items in the list change
        this.items.addListener((javafx.collections.ListChangeListener.Change<? extends OrderItem> c) -> {
            recalculateTotal();
        });
    }

    /**
     * Constructor for loading an existing Order from the database.
     * @param id The unique ID of the order.
     * @param customerName The name of the customer.
     * @param total The total amount of the order (should be recalculated for accuracy).
     * @param isPaid Boolean indicating if the order has been paid.
     * @param paymentMethod The method of payment (e.g., "Cash", "Card").
     */
    public Order(int id, String customerName, double total, boolean isPaid, String paymentMethod) {
        this.id = new SimpleIntegerProperty(id);
        this.customerName = new SimpleStringProperty(customerName);
        this.total = new SimpleDoubleProperty(total); // Initial value from DB, will be recalculated if items are added/modified
        this.isPaid = new SimpleBooleanProperty(isPaid);
        this.paymentMethod = new SimpleStringProperty(paymentMethod);
        this.items = FXCollections.observableArrayList();
        // Listener to recalculate total whenever items in the list change
        this.items.addListener((javafx.collections.ListChangeListener.Change<? extends OrderItem> c) -> {
            recalculateTotal();
        });
    }

    // Getters for JavaFX Properties
    public IntegerProperty idProperty() { return id; }
    public StringProperty customerNameProperty() { return customerName; }
    public DoubleProperty totalProperty() { return total; }
    public BooleanProperty isPaidProperty() { return isPaid; }
    public StringProperty paymentMethodProperty() { return paymentMethod; }

    // Regular Getters
    public int getId() { return id.get(); }
    public String getCustomerName() { return customerName.get(); }
    public double getTotal() { return total.get(); }
    public boolean getIsPaid() { return isPaid.get(); }
    public String getPaymentMethod() { return paymentMethod.get(); }
    public ObservableList<OrderItem> getItems() { return items; }

    // Setters
    public void setId(int id) { this.id.set(id); }
    public void setCustomerName(String customerName) { this.customerName.set(customerName); }
    public void setIsPaid(boolean isPaid) { this.isPaid.set(isPaid); }
    public void setPaymentMethod(String paymentMethod) { this.paymentMethod.set(paymentMethod); }

    /**
     * Adds an OrderItem to this order and recalculates the total.
     * @param item The OrderItem to add.
     */
    public void addItem(OrderItem item) {
        this.items.add(item);
        // The listener on 'items' should trigger recalculateTotal() automatically.
        // No explicit call needed here if listener is reliable.
    }

    /**
     * Recalculates the total amount of the order based on its current items.
     */
    public void recalculateTotal() {
        double newTotal = 0.0;
        for (OrderItem oi : items) {
            newTotal += oi.getTotal();
        }
        this.total.set(newTotal);
        // DEBUGGING LINE: Print the calculated total to console
        System.out.println("DEBUG: Order total recalculated to: Rs. " + String.format("%.2f", newTotal));
    }
}
